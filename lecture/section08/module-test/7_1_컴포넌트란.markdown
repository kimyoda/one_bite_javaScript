# 컴포넌트와 모듈이란?

---

## 1. 컴포넌트란?

- **컴포넌트**는 웹 애플리케이션을 기능별로 나눈 독립적인 부분입니다.
- 중복 코드 없이 재사용이 가능하고, 기능과 구조를 명확하게 분리할 수 있어 유지보수가 편리합니다.
- 예시: 버튼(TabBar), 동물 사진 표시(Content) 등
- 실제로는 `TabBar.js`, `Content.js`와 같은 파일로 분리하여 관리합니다.

### 컴포넌트의 특징

- 사용자 인터페이스(UI)를 구성하는 독립적이고 재사용 가능한 부분
- 각 컴포넌트는 자체적인 상태(state)와 동작(behavior)을 가질 수 있음
- 예시: React, Vue, Svelte 등 프레임워크에서 컴포넌트 기반 개발이 일반적임

---

## 2. 모듈이란?

- **모듈**은 재사용 가능한 코드의 집합으로, 특정 기능을 수행하는 코드를 하나의 단위로 묶어 관리합니다.
- 모듈을 사용하면 코드의 구조화, 재사용성, 유지보수성이 향상됩니다.

### 모듈의 특징

- 코드의 중복을 줄이고, 각 기능을 독립적으로 관리 가능
- 외부로부터 코드를 숨기고, 필요한 부분만 공개(export)할 수 있음
- 예시: `api.js`, `util.js` 등

---

## 3. 모듈 시스템 (ECMAScript Module System)

- ES6(ECMAScript 2015)부터 공식적으로 모듈 시스템이 도입됨
- `export`와 `import` 키워드를 사용하여 모듈을 내보내고 가져올 수 있음

```js
// TabBar.js
export const num = 10;
export function tabBar() {
  /* ... */
}

// Content.js, api.js 등에서 import
import { num, tabBar } from "./TabBar.js";
```

### 모듈의 장점

- 코드의 재사용성 증가
- 네임스페이스 충돌 방지
- 유지보수 용이

---

## 4. 컴포넌트 vs 모듈

| 구분        | 컴포넌트                                | 모듈                              |
| ----------- | --------------------------------------- | --------------------------------- |
| 목적        | UI의 독립적, 재사용 가능한 부분         | 기능별 코드의 묶음                |
| 예시        | 버튼, 리스트, 카드 등                   | API, 유틸 함수, 상수 등           |
| 사용 방식   | 주로 프레임워크(React, Vue 등)에서 사용 | JS 표준(ESM), Node.js 등에서 사용 |
| 재사용성    | 높음                                    | 높음                              |
| 의존성 관리 | props, state 등으로 관리                | import/export로 관리              |

---

## 5. 실제 예시

### 컴포넌트 예시 (React)

```jsx
function Button({ label, onClick }) {
  return <button onClick={onClick}>{label}</button>;
}
```

### 모듈 예시 (ESM)

```js
// math.js
export function add(a, b) {
  return a + b;
}

// main.js
import { add } from "./math.js";
console.log(add(2, 3)); // 5
```

---

## 참고 이미지

image.png
