### 2_14 자바스크립트 내장 함수 (배열)

---

## ✅ forEach

- **정의**: 배열의 각 요소에 대해 주어진 콜백 함수를 한 번씩 실행한다 (반환값이 없다)
- **용도**: 단순 반복, 요소 출력, 부수 효과(side effect)작업에 사용한다.
- **원본 배열 변경**: 없다
- **사용**: `배열.forEach(콜백)`
- **콜백 인자**: `(요소값, 인덱스, 원본배열)`

```js
let arr = [1, 2, 3, 4, 5];
arr.forEach((el, idx, array) => {
  console.log(`${idx}번째 요소는 ${el}입니다.`);
  console.log(array);
});
```

---

## ✅ map

- **정의**: 배열의 각 요소를 변환하여 새로운 배열을 반환
- **용도**: 배열의 값을 가공해 새 배열을 만들 때
- **원본 배열 변경**: 없다
- **사용**: 변환된 새 배열

```js
let newArray = arr.map((el) => el * 10);
console.log(newArray); // [10, 20, 30, 40, 50]
```

---

## ✅ at

- **정의**: 지정한 인덱스의 요소를 반환 (음수면 뒤에서부터 셈)
- **용도**: 배열의 특정 위치 요소에 쉽게 접근
- **원본 배열 변경**: 없다

```js
let colors = ["green", "blue", "purple"];
console.log(colors.at(-1)); // "purple"
```

---

## ✅ includes

- **정의**: 배열에 특정 값이 포함되어 있는지 boolean으로 반환
- **용도**: 값 존재 여부 확인
- **원본 배열 변경**: 없다

```js
console.log(colors.includes("red", 2)); // false
console.log(colors.includes("blue", 1)); // true
```

---

## ✅ indexOf

- **정의**: 배열에서 특정 값의 첫 번째 인덱스를 반환, 없으면 -1
- **용도**: 값의 위치(인덱스) 찾기
- **원본 배열 변경**: 없다

```js
console.log(colors.indexOf("purple")); // 2
console.log(colors.indexOf("yellow")); // -1
```

---

## ✅ findIndex

- **정의**: 콜백이 true를 반환하는 첫 번째 요소의 인덱스를 반환, 없으면 -1
- **용도**: 객체 배열 등에서 조건에 맞는 요소의 인덱스 찾기
- **원본 배열 변경**: 없다

```js
let colors2 = [
  { id: 1, color: "green" },
  { id: 2, color: "blue" },
  { id: 3, color: "purple" },
  { id: 4, color: "yellow" },
];

const idxPurple = colors2.findIndex((el) => el.color === "purple");
console.log(idxPurple); // 2
```

---

## ✅ find

- **정의**: 콜백이 true를 반환하는 첫 번째 요소 자체를 반환, 없으면 undefined
- **용도**: 객체 배열 등에서 조건에 맞는 요소(값) 자체를 찾을 때
- **원본 배열 변경**: 없다

```js
let found = colors2.find((el) => el.color === "purple");
console.log(found); // { id: 3, color: "purple" }
```

---

## ✅ filter

- **정의**: 콜백이 true를 반환하는 모든 요소로 새 배열 생성
- **용도**: 조건에 맞는 요소만 추출해 새 배열 만들기
- **원본 배열 변경**: 없다

```js
let filterArray = colors2.filter((el) => el.id > 1);
console.log(filterArray);
// [{ id: 2, color: "blue" }, { id: 3, color: "purple" }, { id: 4, color: "yellow" }]
```

---

## ✅ slice

- **정의**: 지정한 범위(start ~ end-1)의 요소로 새 배열 반환
- **용도**: 배열의 일부분만 복사해 새 배열 만들기
- **원본 배열 변경**: 없다

```js
let slicedArray = colors2.slice(1, 3);
console.log(slicedArray);
// [{ id: 2, color: "blue" }, { id: 3, color: "purple" }]
```

---

## 📝 정리 요약

| 함수                    | 반환값           | 특징                          |
| ----------------------- | ---------------- | ----------------------------- |
| `forEach`               | 없음             | 단순 반복 및 부수효과용       |
| `map`                   | 새 배열          | 값 가공 후 새 배열 생성       |
| `at`                    | 요소값           | 음수 인덱스 접근 가능         |
| `includes`              | `true` / `false` | 포함 여부 확인                |
| `indexOf` / `findIndex` | 인덱스 번호 / -1 | 값 또는 조건의 인덱스 반환    |
| `find`                  | 요소 자체        | 조건에 맞는 첫 번째 요소 반환 |
| `filter`                | 새 배열          | 조건에 맞는 모든 요소 필터링  |
| `slice`                 | 새 배열          | 일부분 잘라 복사, 원본 유지   |
