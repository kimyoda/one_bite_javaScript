### 2_14 자바스크립트 내장 함수 (배열)

---

## ✅ forEach

- **정의**: 배열의 각 요소에 대해 주어진 콜백 함수를 한 번씩 실행한다. 반환값이 없다(`undefined`).
- **용도**: 단순 반복, 요소 출력, 부수 효과(side effect) 작업(예: 콘솔 출력, DOM 조작 등)에 사용한다.
- **원본 배열 변경**: 없다 (단, 콜백에서 원본 배열을 직접 수정하면 변경 가능)
- **콜백 인자**: `(요소값, 인덱스, 원본배열)`
- **반환값**: 항상 `undefined`
- **주의**: `break`, `return`으로 반복을 중단할 수 없다. (모든 요소를 끝까지 순회)
- **실무 팁**: 주로 단순 출력, 누적, 외부 상태 변경 등에 사용. 값을 가공해 새 배열을 만들고 싶으면 `map`을 사용해야 한다.

```js
let arr = [1, 2, 3, 4, 5];
arr.forEach((el, idx, array) => {
  console.log(`${idx}번째 요소는 ${el}입니다.`);
  // array는 원본 배열
});
```

---

## ✅ map

- **정의**: 배열의 각 요소를 변환하여 새로운 배열을 반환한다.
- **용도**: 배열의 값을 가공해 새 배열을 만들 때 (ex. 숫자 변환, 객체 변환 등)
- **원본 배열 변경**: 없다
- **콜백 인자**: `(요소값, 인덱스, 원본배열)`
- **반환값**: 변환된 새 배열 (원본과 길이 동일)
- **주의**: 반드시 새 배열을 반환. 콜백에서 반환하지 않으면 `undefined`로 채워진다.
- **실무 팁**: React 등에서 데이터 변환, 렌더링용 배열 만들 때 자주 사용

```js
let newArray = arr.map((el) => el * 10);
console.log(newArray); // [10, 20, 30, 40, 50]
```

---

## ✅ at

- **정의**: 지정한 인덱스의 요소를 반환. 음수 인덱스는 뒤에서부터 센다.
- **용도**: 배열의 특정 위치 요소에 쉽게 접근 (특히 마지막 요소 등)
- **원본 배열 변경**: 없다
- **콜백 없음**
- **반환값**: 해당 인덱스의 값, 없으면 `undefined`
- **실무 팁**: `arr[arr.length - 1]` 대신 `arr.at(-1)`로 마지막 요소 접근 가능 (ES2022+)

```js
let colors = ["green", "blue", "purple"];
console.log(colors.at(-1)); // "purple"
```

---

## ✅ includes

- **정의**: 배열에 특정 값이 포함되어 있는지 boolean으로 반환한다.
- **용도**: 값 존재 여부 확인
- **원본 배열 변경**: 없다
- **콜백 없음**
- **반환값**: `true` 또는 `false`
- **두 번째 인자**: 검색을 시작할 인덱스(기본값 0)
- **주의**: `NaN`도 올바르게 탐지(`indexOf`는 불가)
- **실무 팁**: 조건문에서 값 포함 여부 체크에 자주 사용

```js
console.log(colors.includes("red", 2)); // false
console.log(colors.includes("blue", 1)); // true
console.log([NaN].includes(NaN)); // true
```

---

## ✅ indexOf

- **정의**: 배열에서 특정 값의 첫 번째 인덱스를 반환, 없으면 -1
- **용도**: 값의 위치(인덱스) 찾기
- **원본 배열 변경**: 없다
- **콜백 없음**
- **반환값**: 인덱스(숫자), 없으면 -1
- **두 번째 인자**: 검색을 시작할 인덱스(기본값 0)
- **주의**: `NaN`은 탐지 불가(`includes` 사용)
- **실무 팁**: 값의 위치를 알아야 할 때, 중복 값이 있을 경우 첫 번째 인덱스만 반환

```js
console.log(colors.indexOf("purple")); // 2
console.log(colors.indexOf("yellow")); // -1
```

---

## ✅ findIndex

- **정의**: 콜백이 true를 반환하는 첫 번째 요소의 인덱스를 반환, 없으면 -1
- **용도**: 객체 배열 등에서 조건에 맞는 요소의 인덱스 찾기
- **원본 배열 변경**: 없다
- **콜백 인자**: `(요소값, 인덱스, 원본배열)`
- **반환값**: 인덱스(숫자), 없으면 -1
- **실무 팁**: 객체 배열에서 특정 조건의 인덱스 찾을 때 유용

```js
let colors2 = [
  { id: 1, color: "green" },
  { id: 2, color: "blue" },
  { id: 3, color: "purple" },
  { id: 4, color: "yellow" },
];

const idxPurple = colors2.findIndex((el) => el.color === "purple");
console.log(idxPurple); // 2
```

---

## ✅ find

- **정의**: 콜백이 true를 반환하는 첫 번째 요소 자체를 반환, 없으면 undefined
- **용도**: 객체 배열 등에서 조건에 맞는 요소(값) 자체를 찾을 때
- **원본 배열 변경**: 없다
- **콜백 인자**: `(요소값, 인덱스, 원본배열)`
- **반환값**: 해당 요소(값), 없으면 `undefined`
- **실무 팁**: 객체 배열에서 특정 조건의 객체를 찾을 때 매우 자주 사용

```js
let found = colors2.find((el) => el.color === "purple");
console.log(found); // { id: 3, color: "purple" }
```

---

## ✅ filter

- **정의**: 콜백이 true를 반환하는 모든 요소로 새 배열 생성
- **용도**: 조건에 맞는 요소만 추출해 새 배열 만들기
- **원본 배열 변경**: 없다
- **콜백 인자**: `(요소값, 인덱스, 원본배열)`
- **반환값**: 조건에 맞는 요소로 구성된 새 배열(0개 이상)
- **실무 팁**: 검색, 필터링, 조건부 추출 등에서 매우 자주 사용

```js
let filterArray = colors2.filter((el) => el.id > 1);
console.log(filterArray);
// [{ id: 2, color: "blue" }, { id: 3, color: "purple" }, { id: 4, color: "yellow" }]
```

---

## ✅ slice

- **정의**: 지정한 범위(start ~ end-1)의 요소로 새 배열 반환
- **용도**: 배열의 일부분만 복사해 새 배열 만들기
- **원본 배열 변경**: 없다
- **반환값**: 잘라낸 부분의 새 배열
- **음수 인덱스**: 뒤에서부터 셈
- **실무 팁**: 배열 복사(`arr.slice()`), 일부만 추출할 때 사용. 문자열에도 사용 가능(`str.slice()`)

```js
let slicedArray = colors2.slice(1, 3);
console.log(slicedArray);
// [{ id: 2, color: "blue" }, { id: 3, color: "purple" }]
```

---

## 📝 정리 요약

| 함수                    | 반환값           | 특징                                |
| ----------------------- | ---------------- | ----------------------------------- |
| `forEach`               | 없음             | 단순 반복 및 부수효과용, break 불가 |
| `map`                   | 새 배열          | 값 가공 후 새 배열 생성             |
| `at`                    | 요소값           | 음수 인덱스 접근 가능               |
| `includes`              | `true` / `false` | 포함 여부 확인, NaN 탐지 가능       |
| `indexOf` / `findIndex` | 인덱스 번호 / -1 | 값 또는 조건의 인덱스 반환          |
| `find`                  | 요소 자체        | 조건에 맞는 첫 번째 요소 반환       |
| `filter`                | 새 배열          | 조건에 맞는 모든 요소 필터링        |
| `slice`                 | 새 배열          | 일부분 잘라 복사, 원본 유지         |

// 꼭 알아야 할 추가 팁
// - forEach는 break/continue 불가, map/filter는 항상 새 배열 반환
// - includes는 NaN도 탐지, indexOf는 NaN 탐지 불가
// - slice는 배열 복사에도 사용 가능
// - find는 조건에 맞는 첫 요소, filter는 모든 요소(배열) 반환
