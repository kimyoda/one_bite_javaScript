# 📘 2.10 객체 (Object)

---

## ✅ 객체란?

- 자바스크립트의 **비원시 타입(Non-Primitive)** 중 하나
- **여러 값을 하나의 단위로 묶어서 관리**할 수 있는 자료구조
- 객체는 **key(프로퍼티명)** 와 **value(값)** 로 구성됨
- 예시: 사람(Person) → 나이, 이름, 애완동물, 전화번호 등

---

## ✅ 객체 생성 방법

### 1. 생성자 함수 방식

````js
let obj = new Object();
console.log(obj); // {}

---
### 2. 객체 리터럴 방식
```js
let book = {
  title: "자바스크립트 첫걸음",
  author: "김요한",
  category: "자바스크립트",
  year: undefined, // undefined도 값으로 가능
  color: function () {
    console.log("red"); // 함수도 값 → 메서드로 사용됨
  },
};

let car = {
  name: "테슬라",
  model: "테슬라차",
  color: "white",
};

````

---

## 🔍 객체의 값 접근 방법

### 1. 점 표기법 (dot notation)

```js
console.log(car.name); // "테슬라"
console.log(car.color); // "white"
```

### 2. 대괄호 표기법 (bracket notation)

```js
console.log(car["name"]); // "테슬라"
console.log(car["model"]); // "테슬라차"
console.log(car["color"]); // "white"

// 대괄호 표기법은 동적으로 key를 접근할 때 유용
const getValue = (key) => {
  console.log(car[key]);
};

getValue("color"); // "white"
```

---

## ✅ const로 선언한 객체의 특징

```js
const cat = {
  age: 2,
  name: "고양이",
  color: "black",
};
```

- `const`로 선언된 객체라도 속성은 수정 / 삭제 가능
- 객체 자체의 참조는 바꿀 수 없으나 내부 값은 조작 가능

```js
delete cat.color;
delete cat["age"];

console.log(cat); // { name: "고양이" }
```

---

## ✅ 메서드와 this

- 객체의 값으로 함수를 정의 -> 메서드(method)
- 메서드 내부에서 `this`는 해당 객체 자신을 가리킨다.

```js
const person = {
  name: "김요헌",
  age: 23,
  print: function () {
    console.log(`제 이름은 ${this.name}입니다.`);
  },
};

person.print(); // 제 이름은 김요헌입니다.
person["print"](); // 제 이름은 김요헌입니다.
```

---

## 📌 요약

| 개념          | 설명                                    |
| ------------- | --------------------------------------- |
| 객체 리터럴   | `{ key: value }` 형식                   |
| 점 표기법     | `obj.key`                               |
| 대괄호 표기법 | `obj["key"]`                            |
| 메서드        | 객체 내부 함수                          |
| `this` 키워드 | 메서드 내부에서 해당 객체 자신을 참조함 |
