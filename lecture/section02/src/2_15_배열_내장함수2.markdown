### 2_15 자바스크립트 내장 함수 (배열)

---

## ✅ concat

- **정의**: 여러 배열을 하나로 합쳐서 새 배열 반환
- **원본 배열 변경**: ❌

```js
let array1 = ["green", "blue"];
let array2 = ["purple", "yellow"];

// concat: array1 뒤에 array2의 모든 요소가 붙은 새로운 배열을 반환
// 원본 배열(array1, array2)은 절대 바뀌지 않는다 (불변성)
console.log(array1.concat(array2)); // ['green', 'blue', 'purple', 'yellow']
// 실무 팁: 여러 배열을 합칠 때 for문, push 대신 concat을 쓰면 코드가 간결해진다.
```

---

## ✅ join

- **정의**: 배열을 문자열로 변환
- **용도**: 쉼표 ,
- 다른 구분자 지정도 가능

```js
let array3 = ["green", "blue", "purple", "yellow"];

// join: 배열의 모든 요소를 하나의 문자열로 합친다.
// join(구분자): 구분자를 지정하지 않으면 쉼표(,)가 기본값
console.log(array3.join()); // 'green,blue,purple,yellow' (기본: 콤마)
console.log(array3.join(" ")); // 'green blue purple yellow' (공백 구분자)
// 실무 팁: 태그 문자열, CSV, 사용자 이름 목록 등 만들 때 자주 사용
// 주의: 배열이 비어 있으면 빈 문자열 반환
```

---

## ✅ sort (기본 정렬)

- **정의**: 배열을 정렬 (기본은 유니코드 기준 문자열 정렬)
- 숫자 정렬은 비교 함수 필요

```js
let colors = ["green", "blue", "purple"];

// compare 함수: 두 값을 비교해서 정렬 순서를 결정
// 반환값이 음수면 a가 앞, 양수면 b가 앞, 0이면 순서 유지
const compare = (a, b) => {
  if (a > b) return -1; // a가 b보다 크면 앞으로 (내림차순)
  else if (a < b) return 1; // a가 b보다 작으면 뒤로
  else return 0; // 같으면 순서 유지
};

colors.sort(compare); // compare 함수로 내림차순 정렬
console.log(colors); // ['purple', 'green', 'blue']
// 주의: sort는 원본 배열을 직접 바꾼다! (불변성 필요하면 [...arr].sort() 사용)

// 숫자 정렬 (기본 정렬은 문자열로 변환 후 정렬됨)
let numbers = [1, 100, 25, 50, 120, 3];

// compareAsc: 오름차순 정렬 (작은 수가 앞으로)
const compareAsc = (a, b) => a - b;
// compareDesc: 내림차순 정렬 (큰 수가 앞으로)
const compareDesc = (a, b) => b - a;

numbers.sort(compareAsc); // [1, 3, 25, 50, 100, 120]
numbers.sort(compareDesc); // [120, 100, 50, 25, 3, 1]
console.log(numbers);
// 실무 팁: 숫자 정렬 시 반드시 비교 함수를 써야 한다. (안 쓰면 100이 25보다 앞에 옴)
```

---

## ✅ reduce

- **정의**: 배열의 모든 요소를 누적해 하나의 결과값으로 반환
- **용도**: reduce((acc, cur, idx) => {...}, 초기값)

```js
let numbers2 = [1, 100, 25, 50];

// reduce: 배열의 모든 요소를 누적(합산, 곱셈 등)하여 하나의 값으로 만든다.
// acc: 누적값, cur: 현재값, idx: 현재 인덱스
let sum = numbers2.reduce((acc, cur, idx) => {
  console.log(acc, cur, idx); // 누적값, 현재값, 인덱스 출력
  return acc + cur; // 누적값에 현재값을 더해서 반환
}, 10); // 초기값 10 (생략하면 첫 요소가 초기값)

console.log(sum); // 186 (10 + 1 + 100 + 25 + 50)
// 실무 팁: 합계, 평균, 객체 변환, 다차원 배열 평탄화 등 다양한 누적 작업에 활용
// 주의: 초기값을 지정하지 않으면 첫 번째 요소가 초기값이 되고, 두 번째 요소부터 시작
```

---

## ✅ isArray

- **정의**: 값이 배열인지 여부를 판별 (true 또는 false 반환)

```js
// Array.isArray: 값이 배열인지 판별 (true/false)
console.log(Array.isArray([1, 100, 50])); // true (배열)
console.log(Array.isArray({ id: 1, color: "green" })); // false (객체)
console.log(Array.isArray("string")); // false (문자열)
console.log(Array.isArray(undefined)); // false (undefined)
// 실무 팁: 함수에 전달된 값이 배열인지 체크할 때 필수
// 주의: typeof []는 'object'이므로, 배열 판별은 반드시 isArray로!
```

---

## ✅ findIndex

- **정의**: 콜백이 true를 반환하는 첫 번째 요소의 인덱스를 반환, 없으면 -1
- **용도**: 객체 배열 등에서 조건에 맞는 요소의 인덱스 찾기
- **원본 배열 변경**: 없다
- **콜백 인자**: `(요소값, 인덱스, 원본배열)`
- **반환값**: 인덱스(숫자), 없으면 -1
- **실무 팁**: 객체 배열에서 특정 조건의 인덱스 찾을 때 유용

```js
let colors2 = [
  { id: 1, color: "green" },
  { id: 2, color: "blue" },
  { id: 3, color: "purple" },
  { id: 4, color: "yellow" },
];

// findIndex: 콜백이 true를 반환하는 첫 번째 요소의 인덱스를 반환
// 콜백 함수의 인자: (요소값, 인덱스, 원본배열)
const idxPurple = colors2.findIndex((el) => el.color === "purple");
console.log(idxPurple); // 2 (세 번째 요소)
// 반환값: 조건에 맞는 요소의 인덱스(숫자), 없으면 -1
// 실무 팁: 인덱스를 알아야 splice, 특정 위치 수정 등에 활용 가능
// 주의: 조건에 맞는 첫 번째 요소만 찾는다. 여러 개면 첫 번째만!
```

---

## 📝 정리 요약

| 함수      | 반환값           | 특징                                |
| --------- | ---------------- | ----------------------------------- |
| `concat`  | 새 배열          | 배열 결합 (원본 불변)               |
| `[...]`   | 새 배열          | 스프레드로 배열 결합                |
| `join`    | 문자열           | 구분자로 배열을 문자열로 결합       |
| `sort`    | 정렬된 배열      | 기본: 문자열 / 숫자: 비교 함수 필요 |
| `reduce`  | 누적 결과값      | 배열 전체 누적 (합계, 곱 등 계산)   |
| `isArray` | `true` / `false` | 값이 배열인지 판별                  |
