// 비동기와 API
// 비동기 처리

// 동기와 비동기
// 동기 (Synchronous)
// 하나의 작업이 실행되는 동안은 다른 작업을 수행하지 않는 방식
// 예시: 식당에서 주문을 받고 → 요리를 완성하고 → 다음 주문을 받는 방식
// 장점: 순서가 보장되고 예측 가능함
// 단점: 하나의 작업이 오래 걸리면 전체가 멈춤

// 비동기 (Asynchronous)
// 작업이 종료되기를 기다리자 않고 다음 작업을 병렬적으로 수행하는 방식이다.
// 예시: 식당에서 주문을 받고 → 요리를 시작하고 → 다른 주문도 받는 방식
// 장점: 효율적이고 사용자 경험이 좋음
// 단점: 순서가 보장되지 않을 수 있고 복잡함

// 싱글 스레드, 멀티 스레드

// 작업을 수행하는 주체를 스레드라고 부르고 자바스크립트는 싱글 스레드의 언어이다.
// 자바스크립트는 여러개의 스레드를 작업해 사용하는 멀티 스레드를 사용할 수 없다.

// 스레드란?
// - 프로그램 내에서 실행되는 작업의 단위
// - 싱글 스레드: 한 번에 하나의 작업만 처리
// - 멀티 스레드: 여러 작업을 동시에 처리

// 자바스크립트가 싱글 스레드인 이유:
// 1. 브라우저 환경에서 안전성 확보
// 2. DOM 조작의 복잡성 방지
// 3. 예측 가능한 실행 흐름

// 하지만! 자바스크립트는 비동기 처리를 통해 "멀티 스레드처럼" 동작할 수 있다!

// 비동기 작업
// setTimeout을 사용한 비동기 함수들
// 각각 다른 시간(밀리초) 후에 실행됨
const workA = () => {
  setTimeout(() => {
    console.log("workA");
  }, 5000); // 5초 후 실행
};
const workB = () => {
  setTimeout(() => {
    console.log("workB");
  }, 3000); // 3초 후 실행
};
const workC = () => {
  setTimeout(() => {
    console.log("workC");
  }, 10000); // 10초 후 실행
};
const workD = () => {
  console.log("workD"); // 즉시 실행 (동기)
};

// 실행 순서 예측:
// 1. workD() - 즉시 실행 (동기)
// 2. workB() - 3초 후 실행 (비동기)
// 3. workA() - 5초 후 실행 (비동기)
// 4. workC() - 10초 후 실행 (비동기)

workA();
workB();
workC();
workD();

// 콘솔 출력 예상:
// workD (즉시)
// workB (3초 후)
// workA (5초 후)
// workC (10초 후)

// 비동기
// setTimeout(() => {
//   console.log("비동기");
//   console.log("종료");
// }, 3000);

// 콜백 함수를 사용한 비동기 처리
// 콜백: 함수가 완료된 후 실행될 함수를 매개변수로 전달하는 방식
const work = (callback) => {
  setTimeout(() => {
    console.log("비동기");
    callback(); // 3초 후에 콜백 함수 실행
  }, 3000);
};

// 콜백 함수의 장점:
// 1. 비동기 작업 완료 후 원하는 동작 수행 가능
// 2. 순서 제어 가능

// 콜백 함수의 단점 (콜백 지옥):
// 1. 중첩된 콜백으로 코드가 복잡해짐
// 2. 에러 처리 어려움
// 3. 가독성 떨어짐

work(() => {
  console.log("종료");
});

// 실행 흐름:
// 1. work() 함수 호출
// 2. setTimeout 시작 (3초 대기)
// 3. 3초 후 "비동기" 출력
// 4. 콜백 함수 실행하여 "종료" 출력

// 실제 비동기 처리 예시들:
// 1. API 호출 (서버에서 데이터 가져오기)
// 2. 파일 읽기/쓰기
// 3. 타이머 (setTimeout, setInterval)
// 4. 이벤트 리스너 (클릭, 키보드 입력 등)
// 5. 애니메이션

// 비동기 처리가 필요한 이유:
// 1. 사용자 경험 향상 (페이지가 멈추지 않음)
// 2. 효율적인 리소스 사용
// 3. 네트워크 요청 처리
// 4. 복잡한 작업의 병렬 처리
