## ✅ 3*1*비동기 처리

### 동기 (synchronous)

- 하나의 작업이 실행되는 동안 다른 작업을 수행하지 않는 방식
- **예시**: 식당에서 주문을 받음 -> 요리를 완성 -> 다음 주문을 받는방식(순차적)
- **장점**: 순서가 보장되고 예측 가능하다.
- **단점**: 하나의 작업이 오래 걸리면 전체가 멈춘다.

---

### 비동기 (asynchronous)

- 작업이 종료되기를 기다리지 않고 다음 작업을 병렬적으로 수행한다.
- **예시**: 식당에서 주문을 받고 -> 요리를 시작 -> 다른 주문도 받으면서 나가는 순서는 순차적이지 않음
- **장점**: 효율적이고 사용자 경험이 좋다.
- **단점** : 순서가 보장되지 않고 복잡할 수 있다.

---

## 🧵 싱글 스레드, 멀티 스레드

- **스레드란?** 프로그램 내에서 실행되는 작업의 단위
- **싱글 스레드** : 한 번에 하나의 작업만 처리한다.
- **멀티 스레드** : 여러 작업을 동시에 처리한다.

### 자바스크립트가 싱글 스레드 인 이유

1. 브라우저 환경에서 안정성 확보
2. DOM 조작의 복잡성 방지
3. 예측 가능한 실행 흐름
   > 하지만 자바스크립트는 비동기 처리를 통해 "멀티 스레드처럼" 동작할 수 있다!

---

## ⚙️ 비동기 작업 예제

```js
const workA = () => {
  setTimeout(() => {
    console.log("workA");
  }, 5000); // 5초 후 실행
};
const workB = () => {
  setTimeout(() => {
    console.log("workB");
  }, 3000); // 3초 후 실행
};
const workC = () => {
  setTimeout(() => {
    console.log("workC");
  }, 10000); // 10초 후 실행
};
const workD = () => {
  console.log("workD"); // 즉시 실행 (동기)
};

workA();
workB();
workC();
workD();
```

실행순서

1. `workD()` -> 즉시 실행
2. `workB()` -> 3초 후
3. `workA()` -> 5초 후
4. `workC()` -> 10초 후

---

## ⏰ 콜백 함수를 사용한 비동기 처리

```js
const work = (callback) => {
  setTimeout(() => {
    console.log("비동기");
    callback(); // 3초 후 콜백 실행
  }, 3000);
};

work(() => {
  console.log("종료");
});
```

실행흐름

1. `work()` 호출
2. `setTimeout` 시작 (3초 대기)
3. 3초 후 "비동기 " 출력
4. 콜백 함수 실행 -> "종료" 출력

---

## 💡 콜백 함수의 장단점

장점

1. 비동기 작업 완료 후 원하는 동작 수행
2. 순서 제어가 가능하다.

단점

1. 중첩으로 인해 코드가 복잡해진다.
2. 에러 처리가 어렵다.
3. 가독성이 떨어진다.

---

## 🌐 실제 비동기 처리 예시

- API 호출 (서버에서 데이터 가져오기)
- 파일 읽기/쓰기
- 타이머 (setTimeout, setInterval)
- 이벤트 리스너 (클릭, 키보드 입력 등)
- 애니메이션

---

## 🚀 비동기 처리가 필요한 이유

1. 사용자 경험 향상 (페이지가 멈추지 않는다)
2. 효율적인 리소스 사용
3. 네트워크 요청 처리를 한다.
4. 복잡한 작업의 병렬 처리
